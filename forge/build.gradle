plugins {
  id 'com.github.johnrengelman.shadow'
}

architectury {
  platformSetupLoomIde()
  forge()
}

configurations {
  common {
    canBeResolved = true
    canBeConsumed = false
  }

  compileClasspath.extendsFrom common
  runtimeClasspath.extendsFrom common
  developmentForge.extendsFrom common

  // Files in this configuration will be bundled into your mod using the Shadow plugin.
  // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
  shadowBundle {
    canBeResolved = true
    canBeConsumed = false
  }
}

dependencies {
  // Add dependency on Forge. This is mainly used for generating the patched Minecraft jar with Forge classes.
  forge(libs.forge)

  modImplementation(libs.architectury.forge)

  common(project(path: ':common', configuration: 'namedElements')) { transitive false }
  shadowBundle project(path: ':common', configuration: 'transformProductionForge')
}

processResources {
  inputs.property 'version', project.version

  filesMatching('META-INF/mods.toml') {
    expand version: project.version
  }
}

shadowJar {
  configurations = [project.configurations.shadowBundle]
  archiveClassifier = 'dev-shadow'
}

remapJar {
  inputFile.set shadowJar.archiveFile
}
