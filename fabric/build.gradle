plugins {
  id 'com.github.johnrengelman.shadow'
}

architectury {
  platformSetupLoomIde()
  fabric()
}

configurations {
  common {
    canBeResolved = true
    canBeConsumed = false
  }
  compileClasspath.extendsFrom common
  runtimeClasspath.extendsFrom common
  developmentFabric.extendsFrom common

  // Files in this configuration will be bundled into your mod using the Shadow plugin.
  // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
  shadowBundle {
    canBeResolved = true
    canBeConsumed = false
  }
}

dependencies {
  modImplementation(libs.fabric.loader)
  modImplementation(libs.fabric.api)

  modImplementation(libs.architectury.fabric)

  common(project(path: ':common', configuration: 'namedElements')) { transitive false }
  shadowBundle project(path: ':common', configuration: 'transformProductionFabric')

  modApi(libs.cloth.config.fabric) {
    exclude(group: "net.fabricmc.fabric-api")
  }

  modImplementation(libs.modmenu)
}

processResources {
  inputs.property 'version', project.version

  filesMatching('fabric.mod.json') {
    expand version: project.version
  }
}

shadowJar {
  configurations = [project.configurations.shadowBundle]
  archiveClassifier = 'dev-shadow'
}

remapJar {
  inputFile.set shadowJar.archiveFile
}
